/* global jQuery, $ */

/* Jonathan Snook - MIT License - https://github.com/snookca/prepareTransition */
(function (a) { a.fn.prepareTransition = function () { return this.each(function () { var b = a(this); b.one("TransitionEnd webkitTransitionEnd transitionend oTransitionEnd", function () { b.removeClass("is-transitioning") }); var c = ["transition-duration", "-moz-transition-duration", "-webkit-transition-duration", "-o-transition-duration"]; var d = 0; a.each(c, function (a, c) { d = parseFloat(b.css(c)) || d }); if (d != 0) { b.addClass("is-transitioning"); b[0].offsetWidth } }) } })(jQuery);

if ((typeof Shopify) === 'undefined') { Shopify = {}; }
if (!Shopify.formatMoney) {
    Shopify.formatMoney = function (cents, format) {
        var value = '',
            placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
            formatString = (format || this.money_format);

        if (typeof cents == 'string') {
            cents = cents.replace('.', '');
        }

        function defaultOption(opt, def) {
            return (typeof opt == 'undefined' ? def : opt);
        }

        function formatWithDelimiters(number, precision, thousands, decimal) {
            precision = defaultOption(precision, 2);
            thousands = defaultOption(thousands, ',');
            decimal = defaultOption(decimal, '.');

            if (isNaN(number) || number == null) {
                return 0;
            }

            number = (number / 100.0).toFixed(precision);

            var parts = number.split('.'),
                dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
                cents = parts[1] ? (decimal + parts[1]) : '';

            return dollars + cents;
        }

        switch (formatString.match(placeholderRegex)[1]) {
            case 'amount':
                value = formatWithDelimiters(cents, 2);
                break;
            case 'amount_no_decimals':
                value = formatWithDelimiters(cents, 0);
                break;
            case 'amount_with_comma_separator':
                value = formatWithDelimiters(cents, 2, '.', ',');
                break;
            case 'amount_no_decimals_with_comma_separator':
                value = formatWithDelimiters(cents, 0, '.', ',');
                break;
        }

        return formatString.replace(placeholderRegex, value);
    };
}

// Timber functions
window.timber = window.timber || {};

timber.cacheSelectors = function () {
    timber.cache = {
        // General
        $html: $('html'),
        $body: $(document.body),
        // Product Page
        $productImage: $('#ProductPhotoImg'),
        $thumbImages: $('#ProductThumbs').find('a.product__thumbnail'),
    };
};

timber.init = function () {
    timber.cacheSelectors();
    timber.drawersInit();
};

timber.drawersInit = function () {
    timber.RightDrawer = new timber.Drawers('CartDrawer', 'right', {
        'onDrawerOpen': ajaxCart.load
    });
};

/**
 * Callback function that re-formats options selector on Product pages
 */
timber.productPage = function (options) {
    var variant = options.variant;
    var moneyFormat;

    if (options.money_format) {
        moneyFormat = options.money_format;
    } else {
        moneyFormat = window.moneyFormat;
    }

    // Selectors
    var $addToCart = $('#AddToCart');
    var $productPrice = $('#ProductPrice');
    var $comparePrice = $('#ComparePrice');
    var $quantityElements = $('.quantity-selector, label + .js-qty');
    var $addToCartText = $('#AddToCartText');
    var $backorderForm = $('#BackorderForm');
    var $selectBox = $('#select-size');

    if (variant) {

        // Update variant image, if one is set and there are more than one image
        if (variant.featured_image && window.galleryImages && window.slider) {
            timber.switchImage(variant.featured_image);
        }

        // Select a valid variant if available
        if (variant.available) {
            // Available, enable the submit button, change text, show quantity elements
            $addToCart.removeClass('disabled').prop('disabled', false);
            $addToCartText.html({{ 'products.product.add_to_cart' | t | json }});
        $quantityElements.show();
        $backorderForm.hide();
    } else {
        // Sold out, disable the submit button, change text, hide quantity elements
        $addToCart.addClass('disabled').prop('disabled', true);
        $addToCartText.html({{ 'products.product.sold_out' | t | json }});
    $backorderForm.show();
    $quantityElements.hide();
}

// prevent items to be added to the cart if size is not selected.
$addToCart.on('click', function (e) {
    if ($selectBox.val() == 'select-size') {
        $selectBox.css({
            "border": "1px",
            "border-color": "red",
            "border-style": "solid"
        });
        e.preventDefault();
        e.stopPropagation();
    } else {
        $addToCart.target('click');
    }
});

$selectBox.change(function () {
    if ($selectBox.val() != 'select-size') {
        $(this).css({
            "border": "1px",
            "border-color": "white",
            "border-style": "solid"
        });
    }
});


// Regardless of stock, update the product price
$productPrice.html('<span class="product-header__price-sign">$</span>' + Shopify.formatMoney(variant.price, moneyFormat).substr(1).slice(0, -3));

// Also update and show the product's compare price if necessary
if (variant.compare_at_price > variant.price) {
    $comparePrice
        .html({{ 'products.product.compare_at' | t | json }} + ' ' + Shopify.formatMoney(variant.compare_at_price, moneyFormat))
                .show();
        } else {
    $comparePrice.hide();
}

    } else {
    // The variant doesn't exist, disable submit button.
    // This may be an error or notice that a specific variant is not available.
    // To only show available variants, implement linked product options:
    //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
    $addToCart.addClass('disabled').prop('disabled', true);
    $quantityElements.hide();
}
};

timber.switchImage = function (featured_image) {
    var index = window.galleryImages.indexOf(featured_image.id);
    window.slider.slide(index);
};

/*============================================================================
  Drawer modules
  - Docs http://shopify.github.io/Timber/#drawers
==============================================================================*/
timber.Drawers = (function () {
    var Drawer = function (id, position, options) {
        var defaults = {
            close: '.js-drawer-close',
            open: '.js-drawer-open-' + position,
            openClass: 'js-drawer-open',
            dirOpenClass: 'js-drawer-open-' + position
        };

        this.$nodes = {
            parent: $('body, html'),
            page: $('#PageContainer, .navigation-container, .bottom-nav-container'),
            moved: $('.is-moved-by-drawer')
        };

        this.config = $.extend(defaults, options);
        this.position = position;

        this.$drawer = $('#' + id);

        if (!this.$drawer.length) {
            return false;
        }

        this.drawerIsOpen = false;
        this.init();
    };

    Drawer.prototype.init = function () {
        $(this.config.open).on('click', $.proxy(this.open, this));
        this.$drawer.find(this.config.close).on('click', $.proxy(this.close, this));
    };

    Drawer.prototype.open = function (evt) {
        // Keep track if drawer was opened from a click, or called by another function
        var externalCall = false;

        // Prevent following href if link is clicked
        if (evt) {
            evt.preventDefault();
        } else {
            externalCall = true;
        }

        // Without this, the drawer opens, the click event bubbles up to $nodes.page
        // which closes the drawer.
        if (evt && evt.stopPropagation) {
            evt.stopPropagation();
            // save the source of the click, we'll focus to this on close
            this.$activeSource = $(evt.currentTarget);
        }

        if (this.drawerIsOpen && !externalCall) {
            return this.close();
        }

        // Notify the drawer is going to open
        timber.cache.$body.trigger('beforeDrawerOpen.timber', this);

        // Add is-transitioning class to moved elements on open so drawer can have
        // transition for close animation
        this.$nodes.moved.addClass('is-transitioning');
        this.$drawer.prepareTransition();

        this.$nodes.parent.addClass(this.config.openClass + ' ' + this.config.dirOpenClass);
        this.drawerIsOpen = true;

        // Set focus on drawer
        this.trapFocus(this.$drawer, 'drawer_focus');

        // Run function when draw opens if set
        if (this.config.onDrawerOpen && typeof (this.config.onDrawerOpen) == 'function') {
            if (!externalCall) {
                this.config.onDrawerOpen();
            }
        }

        if (this.$activeSource && this.$activeSource.attr('aria-expanded')) {
            this.$activeSource.attr('aria-expanded', 'true');
        }

        // Lock scrolling on mobile
        this.$nodes.page.on('touchmove.drawer', function () {
            return false;
        });

        this.$nodes.page.on('click.drawer', $.proxy(function () {
            this.close();
            return false;
        }, this));

        // Notify the drawer has opened
        timber.cache.$body.trigger('afterDrawerOpen.timber', this);
    };

    Drawer.prototype.close = function () {
        if (!this.drawerIsOpen) { // don't close a closed drawer
            return;
        }

        // Notify the drawer is going to close
        timber.cache.$body.trigger('beforeDrawerClose.timber', this);

        // deselect any focused form elements
        $(document.activeElement).trigger('blur');

        // Ensure closing transition is applied to moved elements, like the nav
        this.$nodes.moved.prepareTransition({ disableExisting: true });
        this.$drawer.prepareTransition({ disableExisting: true });

        this.$nodes.parent.removeClass(this.config.dirOpenClass + ' ' + this.config.openClass);

        this.drawerIsOpen = false;

        // Remove focus on drawer
        this.removeTrapFocus(this.$drawer, 'drawer_focus');

        this.$nodes.page.off('.drawer');

        // Notify the drawer is closed now
        timber.cache.$body.trigger('afterDrawerClose.timber', this);
    };

    Drawer.prototype.trapFocus = function ($container, eventNamespace) {
        var eventName = eventNamespace ? 'focusin.' + eventNamespace : 'focusin';

        $container.attr('tabindex', '-1');

        $container.focus();

        $(document).on(eventName, function (evt) {
            if ($container[0] !== evt.target && !$container.has(evt.target).length) {
                $container.focus();
            }
        });
    };

    Drawer.prototype.removeTrapFocus = function ($container, eventNamespace) {
        var eventName = eventNamespace ? 'focusin.' + eventNamespace : 'focusin';

        $container.removeAttr('tabindex');
        $(document).off(eventName);
    };

    return Drawer;
})();

// Initialize Timber's JS on docready
$(timber.init);

/*============================================================================
 Ajax the add to cart experience by revealing it in a side drawer
 Plugin Documentation - http://shopify.github.io/Timber/#ajax-cart
 (c) Copyright 2015 Shopify Inc. Author: Carson Shold (@cshold). All Rights Reserved.

 This file includes:
 - Basic Shopify Ajax API calls
 - Ajax cart plugin

 This requires:
 - jQuery 1.8+
 - handlebars.min.js (for cart template)
 - snippet/ajax-cart-template.liquid

 Customized version of Shopify's jQuery API
 (c) Copyright 2009-2015 Shopify Inc. Author: Caroline Schnapp. All Rights Reserved.
 ==============================================================================*/
if ((typeof ShopifyAPI) === 'undefined') { ShopifyAPI = {}; }

/*============================================================================
 API Helper Functions
 ==============================================================================*/
function attributeToString(attribute) {
    if ((typeof attribute) !== 'string') {
        attribute += '';
        if (attribute === 'undefined') {
            attribute = '';
        }
    }
    return jQuery.trim(attribute);
}

/*============================================================================
 API Functions
 ==============================================================================*/
ShopifyAPI.onCartUpdate = function (cart) {
    //alert('There are now ' + cart.item_count + ' items in the cart.');
};
(() => {
    let isOpenCart = sessionStorage.getItem('open_cart');

    if (isOpenCart !== 'true') return;

    // Trigger only once
    sessionStorage.removeItem('open_cart');

    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
            document.querySelector('.js-drawer-open-right').click();
        }, 1000); 
    });

})();

window.addFreeProduct = async function() {
    let PRODUCT_ID = 40174835728478;
    let formData = {
        'items': [{
         'id': PRODUCT_ID,
         'quantity': 1
         }]
       };

    await fetch(window.Shopify.routes.root + 'cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        return response.json();
      })
      .finally(() => {
        sessionStorage.removeItem('free_product_declined');
        sessionStorage.setItem('open_cart', 'true');
        window.location.reload();
      })
      .catch((error) => {
        console.error('Error:', error);
      });
}

ShopifyAPI.updateCartNote = function (note, callback) {
    var $body = $(document.body),
        params = {
            type: 'POST',
            url: '/cart/update.js',
            data: 'note=' + attributeToString(note),
            dataType: 'json',
            beforeSend: function () {
                $body.trigger('beforeUpdateCartNote.ajaxCart', note);
            },
            success: function (cart) {
                if ((typeof callback) === 'function') {
                    callback(cart);
                }
                else {
                    ShopifyAPI.onCartUpdate(cart);
                }
                $body.trigger('afterUpdateCartNote.ajaxCart', [note, cart]);
            },
            error: function (XMLHttpRequest, textStatus) {
                $body.trigger('errorUpdateCartNote.ajaxCart', [XMLHttpRequest, textStatus]);
                ShopifyAPI.onError(XMLHttpRequest, textStatus);
            },
            complete: function (jqxhr, text) {
                $body.trigger('completeUpdateCartNote.ajaxCart', [this, jqxhr, text]);
            }
        };
    jQuery.ajax(params);
};

ShopifyAPI.onError = function (XMLHttpRequest, textStatus) {
    var data = eval('(' + XMLHttpRequest.responseText + ')');
    if (!!data.message) {
        alert(data.message + '(' + data.status + '): ' + data.description);
    }
};

/*============================================================================
 POST to cart/add.js returns the JSON of the cart
 - Allow use of form element instead of just id
 - Allow custom error callback
 ==============================================================================*/
ShopifyAPI.addItemFromForm = function (form, callback, errorCallback) {
    var $body = $(document.body),
        params = {
            type: 'POST',
            url: '/cart/add.js',
            data: jQuery(form).serialize(),
            dataType: 'json',
            beforeSend: function (jqxhr, settings) {
                $body.trigger('beforeAddItem.ajaxCart', form);
            },
            success: function (line_item) {
                if ((typeof callback) === 'function') {
                    callback(line_item, form);
                }
                else {
                    ShopifyAPI.onItemAdded(line_item, form);
                }
                $body.trigger('afterAddItem.ajaxCart', [line_item, form]);
            },
            error: function (XMLHttpRequest, textStatus) {
                if ((typeof errorCallback) === 'function') {
                    errorCallback(XMLHttpRequest, textStatus);
                }
                else {
                    ShopifyAPI.onError(XMLHttpRequest, textStatus);
                }
                $body.trigger('errorAddItem.ajaxCart', [XMLHttpRequest, textStatus]);
            },
            complete: function (jqxhr, text) {
                $body.trigger('completeAddItem.ajaxCart', [this, jqxhr, text]);
            }
        };
    jQuery.ajax(params);
};
const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))

// Get from cart.js returns the cart in JSON
ShopifyAPI.getCart = function (callback) {
    sleep(1250);
    $(document.body).trigger('beforeGetCart.ajaxCart');
     jQuery.getJSON('/cart.js', function (cart, textStatus) {
        if ((typeof callback) === 'function') {
            callback(cart);
        }
        else {
            ShopifyAPI.onCartUpdate(cart);
        }
        $(document.body).trigger('afterGetCart.ajaxCart', cart);
    });
};

// POST to cart/change.js returns the cart in JSON
ShopifyAPI.changeItem = function (line, quantity, callback) {
    var $body = $(document.body),
        params = {
            type: 'POST',
            url: '/cart/change.js',
            data: 'quantity=' + quantity + '&line=' + line,
            dataType: 'json',
            beforeSend: function () {
                $body.trigger('beforeChangeItem.ajaxCart', [line, quantity]);
            },
            success: function (cart) {
                if ((typeof callback) === 'function') {
                    callback(cart);
                }
                else {
                    ShopifyAPI.onCartUpdate(cart);
                }
                $body.trigger('afterChangeItem.ajaxCart', [line, quantity, cart]);
            },
            error: function (XMLHttpRequest, textStatus) {
                $body.trigger('errorChangeItem.ajaxCart', [XMLHttpRequest, textStatus]);
                ShopifyAPI.onError(XMLHttpRequest, textStatus);
            },
            complete: function (jqxhr, text) {
                $body.trigger('completeChangeItem.ajaxCart', [this, jqxhr, text]);
            }
        };
    jQuery.ajax(params);
};

/*============================================================================
 Ajax Shopify Add To Cart
 ==============================================================================*/
var ajaxCart = (function (module, $) {

    'use strict';

    // Public functions
    var init, loadCart;

    // Private general variables
    var settings, isUpdating, $body;

    // Private plugin variables
    var $formContainer, $addToCart, $cartCountSelector, $cartCostSelector, $cartContainer, $drawerContainer;

    // Private functions
    var updateCountPrice, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, buildCart, cartCallback, adjustCart, adjustCartCallback, createQtySelectors, qtySelectors, validateQty, cartFreeProduct;

    /*============================================================================
     Initialise the plugin and define global options
     ==============================================================================*/
    init = function (options) {

        // Default settings
        settings = {
            formSelector: 'form[action^="/cart/add"]',
            cartContainer: '#CartContainer',
            addToCartSelector: 'input[type="submit"]',
            cartCountSelector: null,
            cartCostSelector: null,
            moneyFormat: '${{amount}}',
            disableAjaxCart: false,
            enableQtySelectors: true
        };

        // Override defaults with arguments
        $.extend(settings, options);

        // Select DOM elements
        $formContainer = $(settings.formSelector);
        $cartContainer = $(settings.cartContainer);
        $addToCart = $formContainer.find(settings.addToCartSelector);
        $cartCountSelector = $(settings.cartCountSelector);
        $cartCostSelector = $(settings.cartCostSelector);

        // General Selectors
        $body = $(document.body);

        // Track cart activity status
        isUpdating = false;

        // Setup ajax quantity selectors on the any template if enableQtySelectors is true
        if (settings.enableQtySelectors) {
            qtySelectors();
        }

        // Take over the add to cart form submit action if ajax enabled
        if (!settings.disableAjaxCart && $addToCart.length) {
            formOverride();
        }

        // Run this function in case we're using the quantity selector outside of the cart
        adjustCart();
    };

    loadCart = function () {
        $body.addClass('drawer--is-loading');
        ShopifyAPI.getCart(cartUpdateCallback);
    };
    // New Option ID: 40174835728478
    cartFreeProduct = async function (cart) {
        if (sessionStorage.getItem('free_product_declined') === 'true') {
            document.body.classList.add('js-free-product-declined')
            return;
        };
        
        let THRESHOLD_PRICE = 19900,
              PRODUCT_ID = 40174835728478,
              CART_TOTAL = cart.total_price,
              isCartUpdated = false;

        // if ((timeNow - lastCall) > timeThreshold) {
        //     console.log('I am here');
        //     // return;
        // }
    
        let isItemInCart = cart.items.find((item) => {
            return item.id === PRODUCT_ID;
        });
        window.freeProductInCart = !(isItemInCart === undefined);
    
        // add item
        if ((CART_TOTAL >= THRESHOLD_PRICE) && !(window.freeProductInCart)) {
            let formData = {
                'items': [{
                 'id': PRODUCT_ID,
                 'quantity': 1
                 }]
               };
    
            await fetch(window.Shopify.routes.root + 'cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
              })
              .then(response => {
                return response.json();
              })
              .catch((error) => {
                console.error('Error:', error);
              });
    
            window.freeProductInCart = true;
            isCartUpdated = true;
        }
    
        // remove item
        if ((CART_TOTAL < THRESHOLD_PRICE) && window.freeProductInCart) {
            let formData = {
                    'line': 1,
                    'quantity': 0
            };

            await fetch(window.Shopify.routes.root + 'cart/change.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
              })
              .then(response => {
                return response.json();
              })
              .catch((error) => {
                console.error('Error:', error);
              });
            
            window.freeProductInCart = false;
            isCartUpdated = true;
        }

        if (isCartUpdated) {
            ShopifyAPI.getCart(cartUpdateCallback);
        } 

    };

    updateCountPrice = function (cart) {
        if ($cartCountSelector) {
            $cartCountSelector.html(cart.item_count).removeClass('hidden-count');

            if (cart.item_count === 0) {
                $cartCountSelector.addClass('hidden-count');
            }
        }
        if ($cartCostSelector) {
            $cartCostSelector.html(Shopify.formatMoney(cart.total_price, settings.moneyFormat).slice(0, -3));
        }
    };

    formOverride = function () {
        $formContainer.on('submit', function (evt) {
            evt.preventDefault();

            // Add class to be styled if desired
            $addToCart.removeClass('is-added').addClass('is-adding');

            // Remove any previous quantity errors
            $('.qty-error').remove();

            ShopifyAPI.addItemFromForm(evt.target, itemAddedCallback, itemErrorCallback);
        });
    };

    itemAddedCallback = function (product) {
        $addToCart.removeClass('is-adding').addClass('is-added');

        ShopifyAPI.getCart(cartUpdateCallback);
    };

    itemErrorCallback = function (XMLHttpRequest, textStatus) {
        var data = eval('(' + XMLHttpRequest.responseText + ')');
        $addToCart.removeClass('is-adding is-added');

        if (!!data.message) {
            if (data.status == 422) {
                $formContainer.after('<div class="errors qty-error">' + data.description + '</div>')
            }
        }
    };

    cartUpdateCallback = function (cart) {
        if (window.freeProduct.available) {
            cartFreeProduct(cart);
        }
        // Update quantity and price
        updateCountPrice(cart);
        buildCart(cart);

        // Replace link to the product with a price
        setTimeout(() => {
            const FREE_PRODUCT_SELECTOR = '[data-product-handle="Free Travel Case"]';
            let freeProduct = document.querySelector(`${FREE_PRODUCT_SELECTOR} .ajaxcart__qty--minus`);

            if(freeProduct) {
                document.querySelectorAll(`${FREE_PRODUCT_SELECTOR} a`).forEach(item => {
                    item.setAttribute('href', '/products/travel-case');
                });
                freeProduct.addEventListener('click', () => {
                    sessionStorage.setItem('free_product_declined', 'true')
                });
            }
        })
    };

    buildCart = function (cart) {
        // Start with a fresh cart div
        $cartContainer.empty();

        // Show empty cart
        if (cart.item_count === 0) {
            $cartContainer
                .append('<div class="text-center"><p>' + {{ 'cart.general.empty' | t | json }} + '</p></div>');
        cartCallback(cart);
        return;
    }

    // Handlebars.js cart layout
    Handlebars.registerHelper('eq', function(a, b) {
        return a === b;
    });
    var items = [],
        item = {},
        data = {},
        source = $("#CartTemplate").html(),
        template = Handlebars.compile(source);

    var hasNoMinimalPackaging = true;
    var hasNoLineSeptum = true;

    // Add each item to our handlebars.js data
    $.each(cart.items, function (index, cartItem) {

        /* Hack to get product image thumbnail
         *   - If image is not null
         *     - Remove file extension, add _small, and re-add extension
         *     - Create server relative link
         *   - A hard-coded url of no-image
         */
        if (cartItem.image != null) {
            var largeImg = cartItem.image.replace(/(\.[^.]*)$/, "_348x348$1").replace('http:', '');
            var mediumImg = cartItem.image.replace(/(\.[^.]*)$/, "_232x232$1").replace('http:', '');
        } else {
            var largeImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
            var mediumImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
        }

        // Create item's data object and add to 'items' array
        item = {
            key: cartItem.key,
            line: index + 1, // Shopify uses a 1+ index in the API
            url: cartItem.url,
            largeImg: largeImg,
            mediumImg: mediumImg,
            name: cartItem.product_title,
            variation: cartItem.variant_title,
            properties: cartItem.properties,
            itemAdd: cartItem.quantity + 1,
            itemMinus: cartItem.quantity - 1,
            itemQty: cartItem.quantity,
            price: Shopify.formatMoney(cartItem.price, settings.moneyFormat).slice(0, -3),
            linePrice: Shopify.formatMoney(cartItem.line_price, settings.moneyFormat).slice(0, -3),
            originalLinePrice: Shopify.formatMoney(cartItem.original_line_price, settings.moneyFormat).slice(0, -3),
            discounts: cartItem.discounts,
            discountsApplied: cartItem.line_price === cartItem.original_line_price ? false : true
        };

        if (item.name === 'Minimal Packaging') {
            hasNoMinimalPackaging = false;
        }

        if (item.name === 'Line Septum') {
            hasNoLineSeptum = false;
        }

        items.push(item);
    });

    // Free product functionality
    const FREE_PRODUCT_THRESHOLD = 19900;
    let freeShippingAcheived = false,
       freeShippingPriceRemain = FREE_PRODUCT_THRESHOLD - cart.total_price;
    if (cart.total_price >= FREE_PRODUCT_THRESHOLD) {
        freeShippingAcheived = true;
    }

    // Gather all cart data and add to DOM
    data = {
        freeProductThresholdRemains: Shopify.formatMoney(freeShippingPriceRemain, settings.moneyFormat).slice(0, -1),
        freeProductThreshold: Shopify.formatMoney(FREE_PRODUCT_THRESHOLD, settings.moneyFormat).slice(0, -3),
        freeProductEnabled: window.freeProduct.available,
        freeProductAdded: freeShippingAcheived,
        isCartEmpty: (items.length === 0),
        hasNoMinimalPackaging: hasNoMinimalPackaging,
        hasNoLineSeptum: hasNoLineSeptum,
        items: items,
        note: cart.note,
        totalPriceRaw: cart.total_price,
        totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat).slice(0, -3),
        totalCartDiscount: cart.total_discount === 0 ? 0 : {{ 'cart.general.savings_html' | t: price: '[savings]' | json }}.replace('[savings]', Shopify.formatMoney(cart.total_discount, settings.moneyFormat)).slice(0, -3),
        totalCartDiscountApplied: cart.total_discount === 0 ? false : true
    }

$cartContainer.append(template(data));

try {
    affirm.ui.refresh();
} catch (e) {
    console.error(e);
}

cartCallback(cart);
    // console.log('there are now new items in the cart!');
};

cartCallback = function (cart) {
    $body.removeClass('drawer--is-loading');
    $body.trigger('afterCartLoad.ajaxCart', cart);

    if (window.Shopify && Shopify.StorefrontExpressButtons) {
        Shopify.StorefrontExpressButtons.initialize();
    }
};

adjustCart = function () {
    // Delegate all events because elements reload with the cart

    // Add or remove from the quantity
    $body.on('click', '.ajaxcart__qty-adjust', function () {
        if (isUpdating) {
            return;
        }

        var $el = $(this),
            line = $el.data('line'),
            $qtySelector = $el.siblings('.ajaxcart__qty-num'),
            qty = parseInt($qtySelector.val().replace(/\D/g, ''));

        var qty = validateQty(qty);

        // Add or subtract from the current quantity
        if ($el.hasClass('ajaxcart__qty--plus')) {
            qty += 1;
        } else {
            qty -= 1;
            if (qty <= 0) qty = 0;
        }

        // If it has a data-line, update the cart.
        // Otherwise, just update the input's number
        if (line) {
            updateQuantity(line, qty);
        } else {
            $qtySelector.val(qty);
        }
    });

    // Update quantity based on input on change
    $body.on('change', '.ajaxcart__qty-num', function () {
        if (isUpdating) {
            return;
        }

        var $el = $(this),
            line = $el.data('line'),
            qty = parseInt($el.val().replace(/\D/g, ''));

        var qty = validateQty(qty);

        // If it has a data-line, update the cart
        if (line) {
            updateQuantity(line, qty);
        }
    });

    // Prevent cart from being submitted while quantities are changing
    $body.on('submit', 'form.ajaxcart', function (evt) {
        if (isUpdating) {
            evt.preventDefault();
        }
    });

    // Highlight the text when focused
    $body.on('focus', '.ajaxcart__qty-adjust', function () {
        var $el = $(this);
        setTimeout(function () {
            $el.select();
        }, 50);
    });

    function updateQuantity(line, qty) {
        isUpdating = true;

        // Add activity classes when changing cart quantities
        var $row = $('.ajaxcart__row[data-line="' + line + '"]').addClass('is-loading');

        if (qty === 0) {
            $row.parent().addClass('is-removed');
        }

        // Slight delay to make sure removed animation is done
        setTimeout(function () {
            ShopifyAPI.changeItem(line, qty, adjustCartCallback);
        }, 250);
    }

    // Save note anytime it's changed
    $body.on('change', 'textarea[name="note"]', function () {
        var newNote = $(this).val();

        // Update the cart note in case they don't click update/checkout
        ShopifyAPI.updateCartNote(newNote, function (cart) { });
    });
};

adjustCartCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);

    // Reprint cart on short timeout so you don't see the content being removed
    setTimeout(function () {
        isUpdating = false;
        ShopifyAPI.getCart(cartUpdateCallback);
        // ShopifyAPI.getCart(buildCart);
    }, 250)
};

createQtySelectors = function () {
    // If there is a normal quantity number field in the ajax cart, replace it with our version
    if ($('input[type="number"]', $cartContainer).length) {
        $('input[type="number"]', $cartContainer).each(function () {
            var $el = $(this),
                currentQty = $el.val();

            var itemAdd = currentQty + 1,
                itemMinus = currentQty - 1,
                itemQty = currentQty;

            var source = $("#AjaxQty").html(),
                template = Handlebars.compile(source),
                data = {
                    key: $el.data('id'),
                    itemQty: itemQty,
                    itemAdd: itemAdd,
                    itemMinus: itemMinus
                };

            // Append new quantity selector then remove original
            $el.after(template(data)).remove();
        });
    }
};

qtySelectors = function () {
    // Change number inputs to JS ones, similar to ajax cart but without API integration.
    // Make sure to add the existing name and id to the new input element
    var numInputs = $('input[type="number"]');

    if (numInputs.length) {
        numInputs.each(function () {
            var $el = $(this),
                currentQty = $el.val(),
                inputName = $el.attr('name'),
                inputId = $el.attr('id');

            var itemAdd = currentQty + 1,
                itemMinus = currentQty - 1,
                itemQty = currentQty;

            var source = $("#JsQty").html(),
                template = Handlebars.compile(source),
                data = {
                    key: $el.data('id'),
                    itemQty: itemQty,
                    itemAdd: itemAdd,
                    itemMinus: itemMinus,
                    inputName: inputName,
                    inputId: inputId
                };

            // Append new quantity selector then remove original
            $el.after(template(data)).remove();
        });

        // Setup listeners to add/subtract from the input
        $('.js-qty__adjust').on('click', function () {
            var $el = $(this),
                id = $el.data('id'),
                $qtySelector = $el.siblings('.js-qty__num'),
                qty = parseInt($qtySelector.val().replace(/\D/g, ''));

            var qty = validateQty(qty);

            // Add or subtract from the current quantity
            if ($el.hasClass('js-qty__adjust--plus')) {
                qty += 1;
            } else {
                qty -= 1;
                if (qty <= 1) qty = 1;
            }

            // Update the input's number
            $qtySelector.val(qty);
        });
    }
};

validateQty = function (qty) {
    if ((parseFloat(qty) == parseInt(qty)) && !isNaN(qty)) {
        // We have a valid number!
    } else {
        // Not a number. Default to 1.
        qty = 1;
    }
    return qty;
};

module = {
    init: init,
    load: loadCart
};

return module;

}(ajaxCart || {}, jQuery));
